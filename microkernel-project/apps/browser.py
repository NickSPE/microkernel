"""
BROWSER APP - Navegador Web Simulado
====================================
Aplicaci√≥n que simula un navegador web b√°sico
usando los servicios de red y archivos del microkernel.
"""

import time
import re
from typing import Optional, List, Dict, Any
from kernel.microkernel import get_kernel
from kernel.ipc import get_ipc_manager
from services.net_service import get_net_service
from services.security_service import get_security_service

class WebPage:
    """Representa una p√°gina web simple"""
    
    def __init__(self, url: str, title: str, content: str):
        self.url = url
        self.title = title
        self.content = content
        self.loaded_at = time.time()
        self.size = len(content)

class Browser:
    """
    Navegador Web Simulado
    Demuestra el uso de servicios de red y seguridad
    """
    
    def __init__(self):
        self.name = "Browser"
        self.version = "1.0"
        self.process_id = None
        self.session_token = None
        self.current_page = None
        self.history = []
        self.bookmarks = []
        self.running = False
        
        # Cache de p√°ginas
        self.page_cache = {}
        
        # P√°ginas web simuladas
        self.simulated_sites = {
            "microkernel.local": WebPage(
                "http://microkernel.local",
                "Microkernel OS - Home",
                self._generate_homepage()
            ),
            "docs.microkernel.local": WebPage(
                "http://docs.microkernel.local",
                "Documentaci√≥n - Microkernel OS",
                self._generate_docs_page()
            ),
            "admin.microkernel.local": WebPage(
                "http://admin.microkernel.local", 
                "Panel de Administraci√≥n",
                self._generate_admin_page()
            ),
            "services.microkernel.local": WebPage(
                "http://services.microkernel.local",
                "Estado de Servicios",
                self._generate_services_page()
            )
        }
        
        print("üåê BROWSER: Aplicaci√≥n inicializada")
    
    def start(self, session_token: str = None):
        """Inicia el navegador"""
        kernel = get_kernel()
        security = get_security_service()
        
        # Verificar autenticaci√≥n
        if session_token:
            username = security.validate_session(session_token)
            if not username:
                print("‚ùå BROWSER: Sesi√≥n inv√°lida")
                return False
            
            self.session_token = session_token
            print(f"‚úÖ BROWSER: Iniciado por usuario autenticado")
        else:
            print("‚ö†Ô∏è  BROWSER: Iniciado sin autenticaci√≥n (acceso limitado)")
        
        # Crear proceso en el kernel
        self.process_id = kernel.create_process(
            name=f"Browser-{int(time.time())}",
            target_func=self._browser_loop,
            priority=2
        )
        
        if self.process_id:
            kernel.start_process(self.process_id)
            self.running = True
            print(f"üöÄ BROWSER: Proceso iniciado (PID: {self.process_id})")
            return True
        
        return False
    
    def stop(self):
        """Detiene el navegador"""
        kernel = get_kernel()
        
        if self.process_id:
            kernel.terminate_process(self.process_id)
        
        self.running = False
        print("‚èπÔ∏è  BROWSER: Navegador cerrado")
    
    def _browser_loop(self):
        """Bucle principal del navegador"""
        print("\n" + "="*60)
        print("üåê NAVEGADOR WEB DEL MICROKERNEL")
        print("="*60)
        print("Comandos disponibles:")
        print("  ‚Ä¢ go <url>           - Navegar a URL")
        print("  ‚Ä¢ back               - P√°gina anterior")
        print("  ‚Ä¢ forward            - P√°gina siguiente")
        print("  ‚Ä¢ refresh            - Recargar p√°gina")
        print("  ‚Ä¢ bookmark           - Guardar marcador")
        print("  ‚Ä¢ bookmarks          - Ver marcadores")
        print("  ‚Ä¢ history            - Ver historial")
        print("  ‚Ä¢ search <t√©rmino>   - Buscar en la p√°gina")
        print("  ‚Ä¢ download <url>     - Descargar archivo")
        print("  ‚Ä¢ view-source        - Ver c√≥digo fuente")
        print("  ‚Ä¢ status             - Estado del navegador")
        print("  ‚Ä¢ home               - Ir a p√°gina principal")
        print("  ‚Ä¢ help               - Ayuda")
        print("  ‚Ä¢ quit               - Salir")
        print("="*60)
        
        # Navegar a p√°gina principal
        self._navigate_to("microkernel.local")
        
        # Comandos de demostraci√≥n
        demo_commands = [
            "go microkernel.local",
            "bookmark",
            "go docs.microkernel.local",
            "search arquitectura",
            "back",
            "go services.microkernel.local",
            "refresh",
            "view-source",
            "history",
            "bookmarks",
            "home",
            "status",
            "quit"
        ]
        
        for command in demo_commands:
            if not self.running:
                break
            
            print(f"\n> {command}")
            result = self._process_command(command)
            
            if result:
                print(result)
            
            time.sleep(2)  # Pausa para demostraci√≥n
        
        self.running = False
    
    def _process_command(self, command_line: str) -> Optional[str]:
        """Procesa un comando del navegador"""
        if not command_line.strip():
            return None
        
        parts = command_line.strip().split()
        command = parts[0].lower()
        args = parts[1:] if len(parts) > 1 else []
        
        try:
            if command in ['quit', 'exit']:
                self.stop()
                return "üëã Navegador cerrado"
            
            elif command == 'go':
                url = args[0] if args else None
                return self._navigate_to(url)
            
            elif command == 'back':
                return self._go_back()
            
            elif command == 'forward':
                return self._go_forward()
            
            elif command == 'refresh':
                return self._refresh_page()
            
            elif command == 'home':
                return self._navigate_to("microkernel.local")
            
            elif command == 'bookmark':
                return self._add_bookmark()
            
            elif command == 'bookmarks':
                return self._show_bookmarks()
            
            elif command == 'history':
                return self._show_history()
            
            elif command == 'search':
                term = ' '.join(args) if args else None
                return self._search_in_page(term)
            
            elif command == 'download':
                url = args[0] if args else None
                return self._download_file(url)
            
            elif command == 'view-source':
                return self._view_source()
            
            elif command == 'status':
                return self._show_status()
            
            elif command == 'help':
                return self._show_help()
            
            else:
                return f"‚ùå Comando desconocido: {command}. Use 'help' para ver comandos."
        
        except Exception as e:
            return f"‚ùå Error ejecutando comando: {e}"
    
    def _navigate_to(self, url: str) -> str:
        """Navega a una URL"""
        if not url:
            return "‚ùå Especifique una URL"
        
        # Normalizar URL
        if not url.startswith('http'):
            url = f"http://{url}"
        
        print(f"üîç Conectando a {url}...")
        
        # Simular tiempo de carga
        time.sleep(0.5)
        
        # Verificar si es un sitio simulado
        domain = url.replace('http://', '').replace('https://', '').split('/')[0]
        
        if domain in self.simulated_sites:
            page = self.simulated_sites[domain]
            
            # Verificar permisos para p√°ginas restringidas
            if domain == "admin.microkernel.local" and not self._check_admin_access():
                return "‚ùå Acceso denegado. Se requiere autenticaci√≥n de administrador."
            
            # Cargar p√°gina
            self.current_page = page
            self.history.append(page.url)
            self.page_cache[page.url] = page
            
            return self._display_page(page)
        
        else:
            # Simular conexi√≥n a sitio externo
            return self._simulate_external_request(url)
    
    def _simulate_external_request(self, url: str) -> str:
        """Simula una petici√≥n a un sitio externo"""
        net_service = get_net_service()
        
        if not net_service.running:
            return "‚ùå Servicio de red no disponible"
        
        # Simular resoluci√≥n DNS
        domain = url.replace('http://', '').replace('https://', '').split('/')[0]
        ip = net_service.resolve_dns(domain)
        
        if not ip:
            return f"‚ùå No se pudo resolver {domain}"
        
        # Simular conexi√≥n
        conn_id = net_service.create_connection("192.168.1.100", ip)
        
        if not conn_id:
            return f"‚ùå No se pudo conectar a {url}"
        
        # Simular petici√≥n HTTP
        request_data = f"GET / HTTP/1.1\\r\\nHost: {domain}\\r\\n\\r\\n"
        success = net_service.send_data(conn_id, request_data)
        
        if success:
            # Simular respuesta
            fake_page = WebPage(url, f"P√°gina Externa - {domain}", 
                               f"Contenido simulado de {url}")
            self.current_page = fake_page
            self.history.append(url)
            
            net_service.close_connection(conn_id)
            
            return self._display_page(fake_page)
        else:
            return f"‚ùå Error cargando {url}"
    
    def _display_page(self, page: WebPage) -> str:
        """Muestra una p√°gina web"""
        display = f"üìÑ {page.title}\n"
        display += f"üîó {page.url}\n"
        display += "‚îÄ" * 50 + "\n"
        display += page.content[:500]  # Primeros 500 caracteres
        
        if len(page.content) > 500:
            display += f"\n... (+{len(page.content) - 500} caracteres m√°s)"
        
        display += f"\n\nüìä Tama√±o: {page.size} bytes | Cargada: {time.ctime(page.loaded_at)}"
        
        return display
    
    def _go_back(self) -> str:
        """Navega hacia atr√°s en el historial"""
        if len(self.history) < 2:
            return "‚ùå No hay p√°ginas anteriores"
        
        # Remover p√°gina actual y ir a la anterior
        self.history.pop()  # Actual
        previous_url = self.history[-1]
        
        return self._navigate_to(previous_url.replace('http://', ''))
    
    def _go_forward(self) -> str:
        """Navega hacia adelante (simplificado)"""
        return "‚ö†Ô∏è  Funci√≥n 'adelante' no implementada en esta demo"
    
    def _refresh_page(self) -> str:
        """Recarga la p√°gina actual"""
        if not self.current_page:
            return "‚ùå No hay p√°gina para recargar"
        
        print("üîÑ Recargando p√°gina...")
        time.sleep(0.3)
        
        # Simular recarga actualizando timestamp
        self.current_page.loaded_at = time.time()
        
        return f"‚úÖ P√°gina recargada: {self.current_page.title}"
    
    def _add_bookmark(self) -> str:
        """A√±ade la p√°gina actual a marcadores"""
        if not self.current_page:
            return "‚ùå No hay p√°gina para marcar"
        
        bookmark = {
            'title': self.current_page.title,
            'url': self.current_page.url,
            'added_at': time.time()
        }
        
        # Verificar si ya existe
        for existing in self.bookmarks:
            if existing['url'] == bookmark['url']:
                return "‚ö†Ô∏è  Esta p√°gina ya est√° en marcadores"
        
        self.bookmarks.append(bookmark)
        return f"‚≠ê Marcador a√±adido: {self.current_page.title}"
    
    def _show_bookmarks(self) -> str:
        """Muestra los marcadores"""
        if not self.bookmarks:
            return "üìö No hay marcadores guardados"
        
        bookmarks_list = "‚≠ê MARCADORES:\n"
        for i, bookmark in enumerate(self.bookmarks, 1):
            bookmarks_list += f"  {i}. {bookmark['title']}\n"
            bookmarks_list += f"     {bookmark['url']}\n"
        
        return bookmarks_list.strip()
    
    def _show_history(self) -> str:
        """Muestra el historial de navegaci√≥n"""
        if not self.history:
            return "üìú Historial vac√≠o"
        
        history_list = "üìú HISTORIAL DE NAVEGACI√ìN:\n"
        for i, url in enumerate(reversed(self.history[-10:]), 1):  # √öltimas 10
            history_list += f"  {i}. {url}\n"
        
        return history_list.strip()
    
    def _search_in_page(self, term: str) -> str:
        """Busca un t√©rmino en la p√°gina actual"""
        if not self.current_page:
            return "‚ùå No hay p√°gina cargada"
        
        if not term:
            return "‚ùå Especifique el t√©rmino a buscar"
        
        content = self.current_page.content.lower()
        term = term.lower()
        
        count = content.count(term)
        if count > 0:
            # Encontrar posiciones
            positions = []
            start = 0
            while start < len(content):
                pos = content.find(term, start)
                if pos == -1:
                    break
                positions.append(pos)
                start = pos + 1
                if len(positions) >= 5:  # Limitar a 5 resultados
                    break
            
            return f"üîç Encontrado '{term}' {count} veces en posiciones: {positions}"
        else:
            return f"‚ùå No se encontr√≥ '{term}' en la p√°gina"
    
    def _download_file(self, url: str) -> str:
        """Simula la descarga de un archivo"""
        if not url:
            return "‚ùå Especifique la URL del archivo"
        
        if not self.session_token:
            return "‚ùå Debe estar autenticado para descargar archivos"
        
        print(f"üì• Descargando {url}...")
        time.sleep(1)  # Simular descarga
        
        # Simular guardado en sistema de archivos
        filename = url.split('/')[-1] or "archivo_descargado"
        
        return f"‚úÖ Archivo descargado: {filename}"
    
    def _view_source(self) -> str:
        """Muestra el c√≥digo fuente de la p√°gina actual"""
        if not self.current_page:
            return "‚ùå No hay p√°gina cargada"
        
        source = f"üìÑ C√ìDIGO FUENTE: {self.current_page.title}\n"
        source += "‚îÄ" * 40 + "\n"
        source += f"<!-- URL: {self.current_page.url} -->\n"
        source += f"<!-- Tama√±o: {self.current_page.size} bytes -->\n"
        source += f"<!-- Cargada: {time.ctime(self.current_page.loaded_at)} -->\n"
        source += "<html>\n<head>\n"
        source += f"<title>{self.current_page.title}</title>\n"
        source += "</head>\n<body>\n"
        source += self.current_page.content[:300]  # Primeros 300 caracteres
        if len(self.current_page.content) > 300:
            source += f"\n... (+{len(self.current_page.content) - 300} caracteres m√°s)"
        source += "\n</body>\n</html>"
        
        return source
    
    def _show_status(self) -> str:
        """Muestra el estado del navegador"""
        kernel = get_kernel()
        process = kernel.get_process(self.process_id) if self.process_id else None
        
        status = f"üåê ESTADO DEL NAVEGADOR\n"
        status += "‚îÄ" * 30 + "\n"
        status += f"Versi√≥n: {self.version}\n"
        status += f"Estado: {'üü¢ Activo' if self.running else 'üî¥ Inactivo'}\n"
        status += f"PID: {self.process_id or 'N/A'}\n"
        status += f"P√°gina actual: {self.current_page.title if self.current_page else 'Ninguna'}\n"
        status += f"Historial: {len(self.history)} p√°ginas\n"
        status += f"Marcadores: {len(self.bookmarks)}\n"
        status += f"Cache: {len(self.page_cache)} p√°ginas\n"
        
        if process:
            status += f"Memoria: {process.memory_allocated} bytes\n"
        
        if self.session_token:
            security = get_security_service()
            username = security.validate_session(self.session_token)
            status += f"Usuario: {username or 'Desconocido'}\n"
        else:
            status += "Usuario: No autenticado\n"
        
        return status
    
    def _check_admin_access(self) -> bool:
        """Verifica si el usuario tiene acceso de administrador"""
        if not self.session_token:
            return False
        
        security = get_security_service()
        username = security.validate_session(self.session_token)
        
        if not username:
            return False
        
        # En un sistema real, verificar√≠amos permisos espec√≠ficos
        return security.check_permission(self.session_token, "admin_access")
    
    def _show_help(self) -> str:
        """Muestra la ayuda del navegador"""
        return """
üåê AYUDA DEL NAVEGADOR

Navegaci√≥n:
  ‚Ä¢ go <url>           - Navegar a una URL
  ‚Ä¢ back               - P√°gina anterior
  ‚Ä¢ home               - Ir a p√°gina principal
  ‚Ä¢ refresh            - Recargar p√°gina actual

Marcadores e Historial:
  ‚Ä¢ bookmark           - Guardar p√°gina actual en marcadores
  ‚Ä¢ bookmarks          - Ver lista de marcadores
  ‚Ä¢ history            - Ver historial de navegaci√≥n

B√∫squeda y Contenido:
  ‚Ä¢ search <t√©rmino>   - Buscar t√©rmino en p√°gina actual
  ‚Ä¢ view-source        - Ver c√≥digo fuente de la p√°gina
  ‚Ä¢ download <url>     - Descargar archivo (requiere autenticaci√≥n)

Informaci√≥n:
  ‚Ä¢ status             - Ver estado del navegador
  ‚Ä¢ help               - Esta ayuda
  ‚Ä¢ quit               - Salir del navegador

Sitios disponibles:
  ‚Ä¢ microkernel.local        - P√°gina principal
  ‚Ä¢ docs.microkernel.local   - Documentaci√≥n
  ‚Ä¢ services.microkernel.local - Estado de servicios
  ‚Ä¢ admin.microkernel.local  - Panel admin (requiere permisos)
        """.strip()
    
    # ==================== P√ÅGINAS SIMULADAS ====================
    
    def _generate_homepage(self) -> str:
        """Genera la p√°gina principal"""
        return """
Bienvenido al Sistema Operativo Microkernel

Este es un sistema operativo experimental que demuestra la
arquitectura microkernel, donde el n√∫cleo mantiene solo las
funcionalidades m√°s b√°sicas y los servicios se ejecutan en
espacio de usuario.

Caracter√≠sticas:
‚Ä¢ N√∫cleo m√≠nimo con gesti√≥n b√°sica de procesos
‚Ä¢ Servicios modulares (archivos, red, seguridad, drivers)
‚Ä¢ Aplicaciones en espacio de usuario
‚Ä¢ Comunicaci√≥n entre procesos (IPC)
‚Ä¢ Sistema de permisos y autenticaci√≥n

Servicios disponibles:
‚Üí Sistema de archivos virtual
‚Üí Servicio de red simulado  
‚Üí Controladores de dispositivos
‚Üí Sistema de seguridad y autenticaci√≥n
‚Üí Planificador de procesos

¬°Explora las diferentes aplicaciones y servicios!
        """.strip()
    
    def _generate_docs_page(self) -> str:
        """Genera la p√°gina de documentaci√≥n"""
        return """
Documentaci√≥n del Microkernel

ARQUITECTURA:
El microkernel implementa una arquitectura donde el n√∫cleo
contiene solo las funciones m√°s esenciales:

1. Gesti√≥n b√°sica de procesos
2. Gesti√≥n m√≠nima de memoria  
3. Comunicaci√≥n entre procesos (IPC)
4. Carga y descarga de servicios

SERVICIOS:
Los servicios se ejecutan en espacio de usuario:

‚Ä¢ FileSystemService: Sistema de archivos virtual
‚Ä¢ NetworkService: Gesti√≥n de conexiones de red
‚Ä¢ DriverService: Controladores de dispositivos
‚Ä¢ SecurityService: Autenticaci√≥n y autorizaci√≥n

APLICACIONES:
Las aplicaciones demuestran el uso de servicios:

‚Ä¢ Calculator: Operaciones matem√°ticas
‚Ä¢ TextEditor: Edici√≥n de archivos de texto
‚Ä¢ Browser: Navegaci√≥n web simulada

VENTAJAS:
‚Üí Modularidad y extensibilidad
‚Üí Mejor aislamiento de fallos
‚Üí Facilidad de mantenimiento
‚Üí Seguridad mejorada
        """.strip()
    
    def _generate_services_page(self) -> str:
        """Genera la p√°gina de estado de servicios"""
        kernel = get_kernel()
        services = kernel.list_services()
        
        content = "Estado de Servicios del Sistema\n\n"
        content += f"Servicios registrados: {len(services)}\n\n"
        
        for service_name in services:
            service = kernel.get_service(service_name)
            if service:
                status = "üü¢ Activo" if getattr(service, 'running', False) else "üî¥ Inactivo"
                version = getattr(service, 'version', 'N/A')
                content += f"‚Ä¢ {service_name}: {status} (v{version})\n"
        
        content += f"\nProcesos activos: {len(kernel.list_processes())}\n"
        
        memory_info = kernel.get_memory_info()
        content += f"Memoria usada: {memory_info['used']}/{memory_info['total']} bytes\n"
        content += f"Uso de memoria: {memory_info['percentage']:.1f}%\n"
        
        return content
    
    def _generate_admin_page(self) -> str:
        """Genera la p√°gina de administraci√≥n"""
        return """
Panel de Administraci√≥n del Sistema

CONTROLES DEL SISTEMA:
‚Ä¢ Gesti√≥n de procesos
‚Ä¢ Configuraci√≥n de servicios
‚Ä¢ Monitoreo de recursos
‚Ä¢ Gesti√≥n de usuarios
‚Ä¢ Logs del sistema

ESTAD√çSTICAS:
‚Üí Tiempo de actividad del sistema
‚Üí Uso de CPU y memoria
‚Üí Operaciones de E/S
‚Üí Conexiones de red activas
‚Üí Eventos de seguridad

CONFIGURACI√ìN:
‚Üí Pol√≠ticas de seguridad
‚Üí L√≠mites de recursos
‚Üí Configuraci√≥n de red
‚Üí Par√°metros del planificador

‚ö†Ô∏è  ADVERTENCIA:
Los cambios en esta secci√≥n pueden afectar
la estabilidad del sistema. Proceder con
precauci√≥n.

Solo usuarios con permisos de administrador
pueden acceder a estas funcionalidades.
        """.strip()

# Funciones de utilidad
def create_browser() -> Browser:
    """Crea una nueva instancia del navegador"""
    return Browser()

def run_browser_demo():
    """Ejecuta una demostraci√≥n del navegador"""
    print("üéØ Iniciando demostraci√≥n del Navegador...")
    
    browser = Browser()
    if browser.start():
        return browser
    else:
        print("‚ùå Error iniciando el navegador")
        return None

if __name__ == "__main__":
    # Si se ejecuta directamente, hacer una demo
    demo_browser = run_browser_demo()
    if demo_browser:
        while demo_browser.running:
            time.sleep(1)