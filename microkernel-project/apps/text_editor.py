"""
TEXT EDITOR APP - Editor de Texto
==================================
Aplicaci√≥n que simula un editor de texto b√°sico
usando los servicios del microkernel.
"""

import time
from typing import Optional, List, Dict, Any
from kernel.microkernel import get_kernel
from kernel.ipc import get_ipc_manager
from services.fs_service import get_fs_service
from services.security_service import get_security_service

class TextEditor:
    """
    Editor de Texto B√°sico
    Demuestra integraci√≥n con servicios de archivos y seguridad
    """
    
    def __init__(self):
        self.name = "TextEditor"
        self.version = "1.0"
        self.process_id = None
        self.session_token = None
        self.current_file = None
        self.content = ""
        self.unsaved_changes = False
        self.running = False
        self.clipboard = ""
        
        # Historial de comandos (para deshacer)
        self.command_history = []
        self.undo_stack = []
        
        print("üìù TEXT_EDITOR: Aplicaci√≥n inicializada")
    
    def start(self, session_token: str = None):
        """Inicia el editor de texto"""
        kernel = get_kernel()
        security = get_security_service()
        
        # Verificar autenticaci√≥n
        if session_token:
            username = security.validate_session(session_token)
            if not username:
                print("‚ùå TEXT_EDITOR: Sesi√≥n inv√°lida")
                return False
            
            self.session_token = session_token
            print(f"‚úÖ TEXT_EDITOR: Iniciado por usuario autenticado")
        else:
            print("‚ö†Ô∏è  TEXT_EDITOR: Iniciado sin autenticaci√≥n (solo lectura)")
        
        # Crear proceso en el kernel
        self.process_id = kernel.create_process(
            name=f"TextEditor-{int(time.time())}",
            target_func=self._editor_loop,
            priority=2  # Prioridad m√°s alta para responsividad
        )
        
        if self.process_id:
            kernel.start_process(self.process_id)
            self.running = True
            print(f"üöÄ TEXT_EDITOR: Proceso iniciado (PID: {self.process_id})")
            return True
        
        return False
    
    def stop(self):
        """Detiene el editor"""
        kernel = get_kernel()
        
        # Advertir sobre cambios sin guardar
        if self.unsaved_changes:
            print("‚ö†Ô∏è  Hay cambios sin guardar")
        
        if self.process_id:
            kernel.terminate_process(self.process_id)
        
        self.running = False
        print("‚èπÔ∏è  TEXT_EDITOR: Aplicaci√≥n detenida")
    
    def _editor_loop(self):
        """Bucle principal del editor"""
        print("\n" + "="*60)
        print("üìù EDITOR DE TEXTO DEL MICROKERNEL")
        print("="*60)
        print("Comandos disponibles:")
        print("  ‚Ä¢ new                - Nuevo documento")
        print("  ‚Ä¢ open <archivo>     - Abrir archivo")
        print("  ‚Ä¢ save [archivo]     - Guardar archivo")
        print("  ‚Ä¢ write <texto>      - Escribir texto")
        print("  ‚Ä¢ insert <pos> <texto> - Insertar texto en posici√≥n")
        print("  ‚Ä¢ delete <inicio> <fin> - Eliminar texto")
        print("  ‚Ä¢ find <texto>       - Buscar texto")
        print("  ‚Ä¢ replace <old> <new> - Reemplazar texto")
        print("  ‚Ä¢ copy <inicio> <fin> - Copiar al portapapeles")
        print("  ‚Ä¢ paste <pos>        - Pegar desde portapapeles")
        print("  ‚Ä¢ undo               - Deshacer √∫ltimo comando")
        print("  ‚Ä¢ show               - Mostrar contenido")
        print("  ‚Ä¢ info               - Informaci√≥n del archivo")
        print("  ‚Ä¢ list               - Listar archivos")
        print("  ‚Ä¢ quit               - Salir")
        print("="*60)
        
        # Comandos de demostraci√≥n
        demo_commands = [
            "new",
            "write Hola mundo desde el microkernel!",
            "write \\nEste es un editor de texto que funciona",
            "write \\ncomo una aplicaci√≥n en espacio de usuario.",
            "show",
            "save demo.txt",
            "find mundo",
            "replace mundo universo",
            "show",
            "copy 0 20",
            "paste 100",
            "show",
            "info",
            "list",
            "save",
            "quit"
        ]
        
        for command in demo_commands:
            if not self.running:
                break
            
            print(f"\n> {command}")
            result = self._process_command(command)
            
            if result:
                print(result)
            
            time.sleep(1.5)  # Pausa para demostraci√≥n
        
        self.running = False
    
    def _process_command(self, command_line: str) -> Optional[str]:
        """Procesa un comando del editor"""
        if not command_line.strip():
            return None
        
        parts = command_line.strip().split()
        command = parts[0].lower()
        args = parts[1:] if len(parts) > 1 else []
        
        # Guardar comando en historial
        self.command_history.append(command_line)
        
        try:
            if command == 'quit' or command == 'exit':
                self.stop()
                return "üëã Editor cerrado"
            
            elif command == 'new':
                return self._new_document()
            
            elif command == 'open':
                filename = args[0] if args else None
                return self._open_file(filename)
            
            elif command == 'save':
                filename = args[0] if args else None
                return self._save_file(filename)
            
            elif command == 'write':
                text = ' '.join(args).replace('\\n', '\n')
                return self._write_text(text)
            
            elif command == 'insert':
                if len(args) < 2:
                    return "‚ùå Uso: insert <posici√≥n> <texto>"
                try:
                    pos = int(args[0])
                    text = ' '.join(args[1:]).replace('\\n', '\n')
                    return self._insert_text(pos, text)
                except ValueError:
                    return "‚ùå Posici√≥n debe ser un n√∫mero"
            
            elif command == 'delete':
                if len(args) < 2:
                    return "‚ùå Uso: delete <inicio> <fin>"
                try:
                    start = int(args[0])
                    end = int(args[1])
                    return self._delete_text(start, end)
                except ValueError:
                    return "‚ùå Las posiciones deben ser n√∫meros"
            
            elif command == 'find':
                text = ' '.join(args)
                return self._find_text(text)
            
            elif command == 'replace':
                if len(args) < 2:
                    return "‚ùå Uso: replace <texto_viejo> <texto_nuevo>"
                old_text = args[0]
                new_text = ' '.join(args[1:])
                return self._replace_text(old_text, new_text)
            
            elif command == 'copy':
                if len(args) < 2:
                    return "‚ùå Uso: copy <inicio> <fin>"
                try:
                    start = int(args[0])
                    end = int(args[1])
                    return self._copy_text(start, end)
                except ValueError:
                    return "‚ùå Las posiciones deben ser n√∫meros"
            
            elif command == 'paste':
                if args:
                    try:
                        pos = int(args[0])
                        return self._paste_text(pos)
                    except ValueError:
                        return "‚ùå La posici√≥n debe ser un n√∫mero"
                else:
                    return self._paste_text()
            
            elif command == 'undo':
                return self._undo()
            
            elif command == 'show':
                return self._show_content()
            
            elif command == 'info':
                return self._show_info()
            
            elif command == 'list':
                return self._list_files()
            
            elif command == 'help':
                return self._show_help()
            
            else:
                return f"‚ùå Comando desconocido: {command}. Use 'help' para ver comandos disponibles."
        
        except Exception as e:
            return f"‚ùå Error ejecutando comando: {e}"
    
    def _new_document(self) -> str:
        """Crea un nuevo documento"""
        if self.unsaved_changes:
            # En un editor real, preguntar√≠amos al usuario
            pass
        
        self.content = ""
        self.current_file = None
        self.unsaved_changes = False
        self.undo_stack.append(('new', self.content))
        
        return "üìÑ Nuevo documento creado"
    
    def _open_file(self, filename: str) -> str:
        """Abre un archivo"""
        if not filename:
            return "‚ùå Especifique el nombre del archivo"
        
        fs = get_fs_service()
        if not fs.running:
            return "‚ùå Servicio de archivos no disponible"
        
        # Obtener username si estamos autenticados
        username = "guest"
        if self.session_token:
            security = get_security_service()
            username = security.validate_session(self.session_token) or "guest"
        
        content = fs.read_file(filename, username)
        if content is None:
            return f"‚ùå No se pudo abrir el archivo: {filename}"
        
        self.content = content
        self.current_file = filename
        self.unsaved_changes = False
        self.undo_stack.append(('open', self.content, filename))
        
        return f"üìÇ Archivo abierto: {filename} ({len(self.content)} caracteres)"
    
    def _save_file(self, filename: str = None) -> str:
        """Guarda el archivo"""
        if not self.session_token:
            return "‚ùå Debe estar autenticado para guardar archivos"
        
        fs = get_fs_service()
        if not fs.running:
            return "‚ùå Servicio de archivos no disponible"
        
        security = get_security_service()
        username = security.validate_session(self.session_token)
        if not username:
            return "‚ùå Sesi√≥n expirada"
        
        # Usar nombre actual si no se especifica uno
        save_filename = filename or self.current_file
        if not save_filename:
            return "‚ùå Especifique el nombre del archivo"
        
        success = fs.write_file(save_filename, self.content, username)
        if success:
            self.current_file = save_filename
            self.unsaved_changes = False
            return f"üíæ Archivo guardado: {save_filename}"
        else:
            return f"‚ùå Error guardando archivo: {save_filename}"
    
    def _write_text(self, text: str) -> str:
        """A√±ade texto al final del documento"""
        old_content = self.content
        self.content += text
        self.unsaved_changes = True
        self.undo_stack.append(('write', old_content))
        
        return f"‚úèÔ∏è  Texto a√±adido ({len(text)} caracteres)"
    
    def _insert_text(self, position: int, text: str) -> str:
        """Inserta texto en una posici√≥n espec√≠fica"""
        if position < 0 or position > len(self.content):
            return f"‚ùå Posici√≥n inv√°lida. Rango v√°lido: 0-{len(self.content)}"
        
        old_content = self.content
        self.content = self.content[:position] + text + self.content[position:]
        self.unsaved_changes = True
        self.undo_stack.append(('insert', old_content, position))
        
        return f"üìù Texto insertado en posici√≥n {position}"
    
    def _delete_text(self, start: int, end: int) -> str:
        """Elimina texto entre dos posiciones"""
        if start < 0 or end > len(self.content) or start > end:
            return f"‚ùå Posiciones inv√°lidas. Rango v√°lido: 0-{len(self.content)}"
        
        old_content = self.content
        deleted_text = self.content[start:end]
        self.content = self.content[:start] + self.content[end:]
        self.unsaved_changes = True
        self.undo_stack.append(('delete', old_content, start, end))
        
        return f"üóëÔ∏è  Eliminado: '{deleted_text}' ({len(deleted_text)} caracteres)"
    
    def _find_text(self, search_text: str) -> str:
        """Busca texto en el documento"""
        if not search_text:
            return "‚ùå Especifique el texto a buscar"
        
        positions = []
        start = 0
        while True:
            pos = self.content.find(search_text, start)
            if pos == -1:
                break
            positions.append(pos)
            start = pos + 1
        
        if positions:
            return f"üîç Encontrado '{search_text}' en posiciones: {positions}"
        else:
            return f"‚ùå No se encontr√≥ '{search_text}'"
    
    def _replace_text(self, old_text: str, new_text: str) -> str:
        """Reemplaza texto en el documento"""
        if not old_text:
            return "‚ùå Especifique el texto a reemplazar"
        
        old_content = self.content
        count = self.content.count(old_text)
        
        if count == 0:
            return f"‚ùå No se encontr√≥ '{old_text}'"
        
        self.content = self.content.replace(old_text, new_text)
        self.unsaved_changes = True
        self.undo_stack.append(('replace', old_content))
        
        return f"üîÑ Reemplazadas {count} ocurrencias de '{old_text}' por '{new_text}'"
    
    def _copy_text(self, start: int, end: int) -> str:
        """Copia texto al portapapeles"""
        if start < 0 or end > len(self.content) or start > end:
            return f"‚ùå Posiciones inv√°lidas. Rango v√°lido: 0-{len(self.content)}"
        
        self.clipboard = self.content[start:end]
        return f"üìã Copiado al portapapeles: '{self.clipboard}' ({len(self.clipboard)} caracteres)"
    
    def _paste_text(self, position: int = None) -> str:
        """Pega texto desde el portapapeles"""
        if not self.clipboard:
            return "‚ùå Portapapeles vac√≠o"
        
        if position is None:
            position = len(self.content)  # Al final
        
        return self._insert_text(position, self.clipboard)
    
    def _undo(self) -> str:
        """Deshace el √∫ltimo comando"""
        if not self.undo_stack:
            return "‚ùå Nada que deshacer"
        
        last_action = self.undo_stack.pop()
        action_type = last_action[0]
        
        if action_type in ['write', 'replace']:
            self.content = last_action[1]  # Restaurar contenido anterior
            self.unsaved_changes = True
            return f"‚Ü©Ô∏è  Deshecho: {action_type}"
        
        elif action_type == 'new':
            return "‚ùå No se puede deshacer la creaci√≥n de documento"
        
        elif action_type == 'open':
            self.content = ""
            self.current_file = None
            return "‚Ü©Ô∏è  Deshecho: abrir archivo"
        
        return "‚Ü©Ô∏è  Comando deshecho"
    
    def _show_content(self) -> str:
        """Muestra el contenido del documento"""
        if not self.content:
            return "üìÑ Documento vac√≠o"
        
        # Mostrar primeras l√≠neas para no saturar la salida
        lines = self.content.split('\n')
        preview_lines = lines[:10]  # Primeras 10 l√≠neas
        
        content_preview = '\n'.join(preview_lines)
        
        info = f"üìÑ CONTENIDO DEL DOCUMENTO:\n"
        info += "‚îÄ" * 40 + "\n"
        info += content_preview
        
        if len(lines) > 10:
            info += f"\n... (+{len(lines) - 10} l√≠neas m√°s)"
        
        info += "\n" + "‚îÄ" * 40
        info += f"\nTotal: {len(self.content)} caracteres, {len(lines)} l√≠neas"
        
        return info
    
    def _show_info(self) -> str:
        """Muestra informaci√≥n del archivo actual"""
        info = "üìä INFORMACI√ìN DEL EDITOR\n"
        info += "‚îÄ" * 30 + "\n"
        info += f"Archivo actual: {self.current_file or 'Sin nombre'}\n"
        info += f"Caracteres: {len(self.content)}\n"
        info += f"L√≠neas: {len(self.content.split(chr(10)))}\n"
        info += f"Palabras: {len(self.content.split())}\n"
        info += f"Cambios sin guardar: {'‚úÖ S√≠' if self.unsaved_changes else '‚ùå No'}\n"
        info += f"Portapapeles: {len(self.clipboard)} caracteres\n"
        info += f"Historial de comandos: {len(self.command_history)}\n"
        info += f"Acciones para deshacer: {len(self.undo_stack)}\n"
        
        if self.session_token:
            security = get_security_service()
            username = security.validate_session(self.session_token)
            info += f"Usuario: {username or 'Desconocido'}\n"
        else:
            info += "Usuario: No autenticado (solo lectura)\n"
        
        return info
    
    def _list_files(self) -> str:
        """Lista archivos disponibles"""
        fs = get_fs_service()
        if not fs.running:
            return "‚ùå Servicio de archivos no disponible"
        
        try:
            files = fs.list_directory("/")
            if not files:
                return "üìÅ No hay archivos en el directorio"
            
            file_list = "üìÅ ARCHIVOS DISPONIBLES:\n"
            for file_item in files:
                file_list += f"  {file_item}\n"
            
            return file_list.strip()
            
        except Exception as e:
            return f"‚ùå Error listando archivos: {e}"
    
    def _show_help(self) -> str:
        """Muestra la ayuda del editor"""
        return """
üìù AYUDA DEL EDITOR DE TEXTO

Gesti√≥n de archivos:
  ‚Ä¢ new                - Crear nuevo documento
  ‚Ä¢ open <archivo>     - Abrir archivo existente
  ‚Ä¢ save [archivo]     - Guardar documento
  ‚Ä¢ list               - Listar archivos disponibles

Edici√≥n de texto:
  ‚Ä¢ write <texto>      - A√±adir texto al final
  ‚Ä¢ insert <pos> <texto> - Insertar en posici√≥n espec√≠fica
  ‚Ä¢ delete <inicio> <fin> - Eliminar rango de texto
  ‚Ä¢ replace <viejo> <nuevo> - Reemplazar texto

B√∫squeda y navegaci√≥n:
  ‚Ä¢ find <texto>       - Buscar texto en el documento
  ‚Ä¢ show               - Mostrar contenido del documento

Portapapeles:
  ‚Ä¢ copy <inicio> <fin> - Copiar texto al portapapeles
  ‚Ä¢ paste [pos]        - Pegar desde portapapeles

Utilidades:
  ‚Ä¢ undo               - Deshacer √∫ltimo comando
  ‚Ä¢ info               - Informaci√≥n del documento
  ‚Ä¢ help               - Esta ayuda
  ‚Ä¢ quit               - Salir del editor

Nota: Use \\n en los textos para representar saltos de l√≠nea
        """.strip()

# Funciones de utilidad
def create_text_editor() -> TextEditor:
    """Crea una nueva instancia del editor"""
    return TextEditor()

def run_text_editor_demo():
    """Ejecuta una demostraci√≥n del editor"""
    print("üéØ Iniciando demostraci√≥n del Editor de Texto...")
    
    editor = TextEditor()
    if editor.start():
        return editor
    else:
        print("‚ùå Error iniciando el editor")
        return None

if __name__ == "__main__":
    # Si se ejecuta directamente, hacer una demo
    demo_editor = run_text_editor_demo()
    if demo_editor:
        while demo_editor.running:
            time.sleep(1)